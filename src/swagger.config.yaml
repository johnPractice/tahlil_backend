openapi: '3.0.3'
info:
  title: Tahlil Backend
  version: '1.0'
  contact:
    email: tahlil.backend@gmail.com

  
paths:
  /test:
    $ref: './test.swagger.yaml'

################### USER #####################
  /user/:
    $ref: './routers/user/user.profile.swagger.yaml'

  /user/login:
    $ref: './routers/user/user.login.swagger.yaml'
    
  /user/signup:
    $ref: './routers/user/user.signup.swagger.yaml'
    
  /user/logout:
    $ref: './routers/user/user.logout.swagger.yaml'
    
  /user/logoutall:
    $ref: './routers/user/user.logoutall.swagger.yaml'

  /user/avatar:
    $ref: './routers/user/user.avatar.swagger.yaml'

################### Bank&Question #####################
  /question:
    $ref: './routers/question/question.swagger.yaml'

  /question/{questionId}:
    $ref: './routers/question/question.delete.swagger.yaml'

  /bank:
    $ref: './routers/bank/bank.swagger.yaml'

################### CLASS #####################
  /user/classes:
    $ref: './routers/user/user.classes.swagger.yaml'

  /class/join:
    $ref: './routers/class/class.join.swagger.yaml'

  /class/leave:
    $ref: './routers/class/class.leave.swagger.yaml'

  /class:
    $ref: './routers/class/class.create.swagger.yaml'

  /class/{classId}:
    $ref: './routers/class/class.classId.swagger.yaml'

################### CLASS MEMBER #####################

  /class/{classId}/members:
      $ref: './routers/class/members.swagger.yaml'

  /class/{classId}/members/{username}:
    $ref: './routers/class/members.username.swagger.yaml'

################### CLASS NOTE #####################

  /class/{classId}/notes:
    $ref: './routers/class/classNote/notes.swagger.yaml'

  /class/{classId}/notes/{classNoteId}:
    $ref: './routers/class/classNote/notes.classNoteId.swagger.yaml'

################### Exam #####################
  /exam:
    $ref: './routers/exam/exam.swagger.yaml' 
    
  /exam/{examId}/questions/{questionIndex}:
    $ref: './routers/exam/exam.questions.update2.swagger.yaml'

  /exam/{examId}:
    $ref: './routers/exam/exam.delete.swagger.yaml'

  /class/{classId}/exams:
    $ref: './routers/class/exam/allExam.class.swagger.yaml'

  /class/{classId}/exams/{examId}:
    $ref: './routers/class/exam/exam.examId.swagger.yaml'

################### Exam Attendance #####################
  /exam/{examId}/questions:
    $ref: './routers/exam/exam.questions.swagger.yaml'

  /exam/{examId}/questions/{questionIndex}/answer:
    $ref: './routers/exam/exam.questions.answer.swagger.yaml'

  /exam/{examId}/questions/status:
    $ref: './routers/exam/exam.questions.status.swagger.yaml'

  /exam/{examId}/questions/review:
    $ref: './routers/exam/exam.questions.review.swagger.yaml'

  /exam/{examId}/attendees:
    $ref: './routers/exam/exam.attendees.swagger.yaml'
    
  /exam/{examId}/attendees/{username}:
    $ref: './routers/exam/attendees.username.swagger.yaml'


################### Report#######################
  /class/{classId}/report:
    $ref: './routers/report/report-html.swagger.yaml'
  
  /class/{classId}/reportImage:
    $ref: './routers/report/report.swagger.yaml'

################### PublicAPi #####################
  /public/question/category:
    $ref: './routers/publicApi/questionCategory.swagger.yaml' 
  /public/time:
    $ref: './routers/publicApi/getTime.swagger.yaml' 
  /public/download/app:
    $ref: './routers/publicApi/downloadApp.swagger.yaml' 




    
        



components:
  securitySchemes:
    bearerAuth:
      description: Auth token ( Bearer + " " + Value )
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    user:
      type: object
      properties:
        firstname:
          type: string
        lastname:
          type: string
        avatar:
          type: string
        username:
          type: string
        email:
          type: string
          format: email

    classInList:
      type: object
      properties:
        name:
          type: string
        classId:
          type: string
        ownerFullname:
          type: string
        isOwned:
          type: boolean
        isPrivate:
          type: boolean

    question:
      type: object
      required:
        - type 
        - public 
        - question
        - answers 
        - hardness
        - base 
        - course
        - chapter       
      properties:
        type:
          $ref: '#components/schemas/type' 
        base:
          $ref: '#components/schemas/base' 
        hardness:
          $ref: '#components/schemas/hardness' 
        course:
          $ref: '#components/schemas/course' 
        chapter:
          $ref: '#components/schemas/chapter' 
        public:
          type: boolean
        imageQuestion:
          type: string
          format: base64
        imageAnswer:
          type: string
          format: base64
        question:
          type: string
        answers:
          type: array
          items:
            type: object
            properties:
              answer:
                type: string
                #oneOf:
                #  - type: string
                #  - type: number
        options:
          type: array
          items:
            type: object
            properties:
              option:
                type: string

    type:
      type: string
      enum: ['TEST', 'MULTICHOISE', 'LONGANSWER', 'SHORTANSWER']
    base:
      type: string
      enum: ['10', '11', '12']
    hardness:
      type: string
      enum: ['LOW', 'MEDIUM', 'HARD']
    course:
      type: string
      enum: ['MATH', 'PHYSIC', 'CHEMISTRY', 'BIOLOGY']
    chapter:
      type: string
      enum: ['1', '2', '3', '4', '5', '6', '7', '8', '9', '10']

    ClassPage:
      type: object
      properties:
        name:
          type: string
        description:
          type: string
        classId:
          type: string
        admin:
          type: object
          properties:
            firstname:
              type: string
            lastname:
              type: string
            email:
              type: string
              format: email
            avatar:
              type: string

    ClassNote:
      type: object
      required:
        - title
        - body
      properties:
        classNoteId:
          type: string
        title:
          type: string
          minLength: 5
        body:
          type: string
          minLength: 5
          maxLength: 120
        creator:
          type: object
          properties:
            firstname:
              type: string
            lastname:
              type: string
            avatar:
              type: string
        createdAt:
          type: string
          format: date-time

    ExamInList:
      type: object
      required:
        - "name"
        - "startDate"
        - "endDate"
        - "examLength"
      properties:
        _id:
          type: string
        name:
          type: string
          minLength: 6
        startDate:
          type: string
          format: date-time
        endDate:
          type: string
          format: date-time
        examLength:
          type: integer

    Exam:
      allOf:
        - $ref: '#components/schemas/ExamInList'
        - type: object
          properties:
            questions:
              type: array
              items:
                type: object
                properties:
                  index:
                    type: integer
                  question:
                    $ref: '#/components/schemas/question'
                  grade:
                    type: integer

    ExamQuestion&Answer:
      type: object
      properties:
        index:
          type: integer
        question:
          type: object
          properties:
            question:
              $ref: '#/components/schemas/question/properties/question'
            imageQuestion:
              $ref: '#/components/schemas/question/properties/imageQuestion'
            type:
              $ref: '#/components/schemas/type'
            options:
              $ref: '#/components/schemas/question/properties/options'
        grade:
          type: number
        answerText:
          type: string
        answerFile:
          type: string
          format: urlPath

    ExamReview:
      type: object
      properties:
        questions:
          type: array
          items:
            allOf:
              - $ref: '#/components/schemas/ExamQuestion&Answer'
              - type: object
                properties:
                  question:
                    type: object
                    properties:
                      answers:
                        $ref: '#/components/schemas/question/properties/answers'
                      imageAnswer:
                        $ref: '#/components/schemas/question/properties/imageAnswer'
                  answerGrade:
                    type: number
        totalGrade:
          type: number